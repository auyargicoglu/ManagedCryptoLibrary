@page "/fetchdata"

@using BlazorTesterForManagedCryptoLibrary.Shared
@using ManagedCryptoLibrary
@using System.Text.Json

@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        byte[] cryptedStream = await Http.GetFromJsonAsync<byte[]>("WeatherForecast");

        CCryptoEngine cryptoEngine = new CCryptoEngine("Blazor Client Side Transient Crypto Engine", (int)DateTime.Now.ToFileTimeUtc(), "diffie-hellman-group14");

        // Lets use a predetermined key here, later we will generate our key using DiffeHellman
        byte[] key = new byte[CCryptoEngine.AesKeySize];
        for (int i = 0; i < key.Length; i++)
            key[i] = (byte)(i * i + i + 0x43);


        byte[] iv = cryptedStream.SubArray(0, CCryptoEngine.AesIvSize);
        byte[] jsonArray = cryptedStream.SubArray(CCryptoEngine.AesIvSize, cryptedStream.Length - CCryptoEngine.AesIvSize);

        Console.WriteLine("IV:");
        Console.WriteLine(iv.DumpArray());
        Console.WriteLine("Data :");
        Console.WriteLine(jsonArray.DumpArray());

        cryptoEngine.AesEndecrypt(iv, key, jsonArray, 0, jsonArray.Length);

        Console.WriteLine("Decrypted Data :");
        Console.WriteLine(jsonArray.DumpArray());

        forecasts = JsonSerializer.Deserialize<WeatherForecast[]>(jsonArray);
    }

}
